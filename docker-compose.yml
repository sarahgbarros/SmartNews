services:
  backend:
    build:
      context: .
      dockerfile: setup/Dockerfile
    container_name: django_app
    command: >
      sh -c "python manage.py migrate --noinput &&
            python manage.py runserver 0.0.0.0:8000"
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped

  frontend:
    build: ./webapp
    container_name: react_app
    volumes:
      - ./webapp:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    stdin_open: true
    tty: true
    depends_on:
      - backend

  redis:
    image: redis:7.2-alpine
    container_name: redis_broker
    ports:
      - "6379:6379"
    restart: always

  celery_producer:
    build:
      context: .
      dockerfile: setup/Dockerfile
    container_name: celery_producer
    command: celery -A setup worker -Q producer --loglevel=info
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      - backend
      - redis
    restart: unless-stopped

  celery_consumer:
    build:
      context: .
      dockerfile: setup/Dockerfile
    container_name: celery_consumer  
    command: celery -A setup worker -Q consumer --loglevel=info
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      - backend
      - redis
    restart: unless-stopped

  flower:
    build:
      context: .
      dockerfile: setup/Dockerfile
    container_name: celery_flower
    command: celery -A setup flower --address=0.0.0.0 --port=5555
    volumes:
      - .:/app
    ports:
      - "5555:5555"
    env_file:
      - .env
    depends_on:
      - celery_producer
      - celery_consumer
      - redis
    restart: unless-stopped

  db:
    image: postgres:16-alpine
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_DB: ${DB_NAME:-smartnews}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
